% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_data.R
\name{fetch_data}
\alias{fetch_data}
\alias{fetch_table}
\alias{fetch_project}
\alias{fetch_cpue}
\title{Query the AAEDB and return a query object to be manipulated
  and evaluated}
\usage{
fetch_table(x, schema = "aquatic_data", collect = FALSE, ...)

fetch_project(project_id = NULL, reporting_system = NULL, collect = FALSE, ...)

fetch_cpue(
  project_id = NULL,
  reporting_system = NULL,
  collect = FALSE,
  criterion = NULL,
  ...
)
}
\arguments{
\item{x}{a character specifying an individual table in the AAEDB}

\item{schema}{schema in which \code{x} is found. Defaults to
\code{"aquatic_data"}}

\item{collect}{logical: should a query be executed (\code{TRUE}) or
evaluated lazily (\code{FALSE}, the default)}

\item{\dots}{additional arguments passed to \link[dbplyr]{tbl_sql}}

\item{project_id}{an integer specifying an individual AAE project.
Any integer values will be accepted but non-existent projects will
return an empty query. Use \code{list_projects} to see a list of all
current projects}

\item{reporting_system}{a character specifying an individual reporting
system, which may encompass multiple waterbodies. Reporting systems
are specified for only a subset of waterbodies; will return an empty
table if a reporting system is not specified. Use \code{list_systems}
to see a list of all current systems}

\item{criterion}{\code{list} containing `var`, `lower`, and `upper` elements
specifying bounds on `var`. Allows complex filtering such as restricting
CPUE estimates to a specific length or weight range}
}
\description{
\code{fetch_table} and \code{fetch_project}
  represent two ways to interact with the AAEDB.
  \code{fetch_table} provides access to prepared tables in
  the database and \code{fetch_project} selects data for an
  individual AAE project.

  All functions require credentials to access the AAEDB, as well
  as a appropriate VPN connection. If making multiple queries,
  it can be easier to connect once to the AAEDB rather than repeatedly
  connecting (and disconnecting). This is possible with the
  \link[aae.db]{aaedb_connect} function.

  Update for version 0.1.0: the \code{fetch_} functions now return an
  unevaluated query rather than a full data table. This allows further
  filtering or changes to the query using \code{dplyr} methods prior to
  downloading the data. This is especially useful when downloading a subset
  of a much larger data sets. All three methods will remain available in
  future versions but may be renamed to better reflect their intended use.
}
\examples{
# connect to the AAEDB
aaedb_connect()

# dplyr methods used below
library(dplyr)

# set up a query that includes the full VEFMAP data set
vefmap <- fetch_project(2)

# can manipulate and filter this query with dplyr methods
vefmap <- vefmap |>
  filter(
    waterbody == "Campaspe River",
    scientific_name == "Maccullochella peelii"
  )

# evaluate this query with collect
vefmap <- vefmap |> collect()

# process a nested query using raw tables from the database
#   and `dplyr` methods
site_data <- fetch_table("site")
survey_data <- fetch_table("survey")
survey_info_dplyr <- site_data |>
  left_join(
    survey_data |> distinct(id_site, id_project),
    by = "id_site"
  ) |>
  filter(grepl("ovens", waterbody, ignore.case = TRUE)) |>
  distinct(waterbody, id_project) |>
  arrange(waterbody, id_project) |>
  collect()

# and grab information for individual projects
ovens_data <- fetch_project(9)
ovens_data <- ovens_data |> collect()

# subset this to 2015-2017 surveys
ovens_data <- fetch_project(9)
ovens_data <- ovens_data |>
  filter(survey_year \%in\% c(2015:2017)) |>
  collect()

# optional: disconnect from the AAEDB prior to ending the R session
#   when all queries and evaluation is complete
# aaedb_disconnect()

}
