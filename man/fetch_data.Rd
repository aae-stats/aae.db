% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_data.R
\name{fetch_data}
\alias{fetch_data}
\alias{fetch_table}
\alias{fetch_query}
\alias{fetch_project}
\title{Query the AAEDB and return a query object to be manipulated
  and downloaded}
\usage{
fetch_table(x, schema = "aquatic_data", collect = TRUE, ...)

fetch_query(query, collect = TRUE, ...)

fetch_project(
  project_id,
  range = c(1900, 2099),
  schema = "aquatic_data",
  collect = TRUE,
  ...
)
}
\arguments{
\item{x}{a character specifying an individual table in the AAEDB}

\item{schema}{schema in which \code{x} is found. Defaults to
\code{"aquatic_data"}}

\item{collect}{logical: should a query be executed and the full
data set returned (default, \code{TRUE}) or should the query
be returned for further processing prior to execution? See description}

\item{\dots}{additional arguments passed to \link[dbplyr]{tbl_sql}}

\item{query}{a character specifying a SQL query}

\item{project_id}{an integer specifying an individual AAE project
(1 - Snags, 2 - VEFMAP, 4 - NFRC, 6 - Kiewa Ovens, 7 - SRA,
 8 - Southern Basins, 9 - Ovens Demo Reaches, 10 - King Parrot
 Creek Macquarie Perch, 11 - Lower Goulburn Projects, 12 - Hughes
 Creek Macquarie Perch, 13 - Seven Creeks Macquarie Perch,
 14 - Index of Estuarine Condition, 15 - LTIM Lower Goulburn,
 16 - IVT Broken Creek)}

\item{range}{a vector containing minimum and maximum years for
which data are required}
}
\description{
\code{fetch_table}, \code{fetch_query}, and
  \code{fetch_project} represent three ways to interact with the
  AAEDB. \code{fetch_table} provides access to prepared tables in
  the database, \code{fetch_query} allows users to compute custom
  queries, and \code{fetch_project} selects data for an
  individual AAE project.

  All functions require credentials to access the AAEDB, as well
  as a appropriate VPN connection. If making multiple queries,
  it can be easier to connect once to the AAEDB rather than repeatedly
  connecting (and disconnecting). This is possible with the
  \link[aae.db]{aaedb_connect} function.

  \code{fetch_query} can be used to download anything
  you would download with \code{fetch_table} or \code{fetch_project}.
  The benefits of \code{fetch_table} and \code{fetch_project} are in
  providing access to prepared tables containing commonly used variables
  for analyses of fish data. The benefit of \code{fetch_query} is in
  allowing custom queries. This may be especially useful when working
  with large spatial data sets.

  Update: the \code{fetch_} functions now return an unevaluated query
  rather than a full data table. This allows further filtering or
  changes to the query using \code{dplyr} methods prior to downloading
  the data. This is especially useful when downloading a subset of a
  much larger data sets. All three methods will remain available in
  future versions but may be renamed to better reflect their intended
  use.
}
\examples{
# connect to the AAEDB
aaedb_connect()

# dplyr methods used below
library(dplyr)

# set up a query that includes the full flat VEFMAP data set
vefmap <- fetch_table("v_vefmap_only_flat_data", collect = FALSE)

# can manipulate and filter this query with dplyr methods
vefmap <- vefmap \%>\%
  filter(
    waterbody == "Campaspe River",
    scientific_name == "Maccullochella peelii"
  )

# evaluate this query with collect
vefmap <- vefmap \%>\% collect()

# process a simple SQL query to list all projects with data from the
#   Ovens river
survey_info <- fetch_query(
  "SELECT waterbody, id_project
     FROM aquatic_data.site a LEFT JOIN aquatic_data.survey b
     ON a.id_site = b.id_site
     WHERE lower(waterbody) LIKE 'ovens\%'
     GROUP BY waterbody, id_project
     ORDER by waterbody, id_project",
  collect = FALSE
)
survey_info <- survey_info \%>\% collect()

# process this same query using dplyr methods
site_data <- fetch_table("site", collect = FALSE)
survey_data <- fetch_table("survey", collect = FALSE)
survey_info_dplyr <- site_data \%>\%
  left_join(
    survey_data \%>\% distinct(id_site, id_project),
    by = "id_site"
  ) \%>\%
  filter(grepl("ovens", waterbody, ignore.case = TRUE)) \%>\%
  distinct(waterbody, id_project) \%>\%
  arrange(waterbody, id_project) \%>\%
  collect()

# and grab information for individual projects
ovens_data <- fetch_project(9, collect = FALSE)
ovens_data <- ovens_data \%>\% collect()

# repeat this for a subset of years
ovens_data <- fetch_project(9, range = c(2015, 2017), collect = FALSE)
ovens_data <- ovens_data \%>\% collect()

# optional: disconnect from the AAEDB prior to ending the R session
#   when all queries and evaluation is complete
# aaedb_disconnect()

}
