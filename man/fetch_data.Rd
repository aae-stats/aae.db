% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fetch_data.R
\name{fetch_data}
\alias{fetch_data}
\alias{fetch_table}
\alias{fetch_query}
\alias{fetch_project}
\alias{fetch_site_info}
\alias{fetch_species_info}
\title{Query the AAEDB and return a query object to be manipulated
  and downloaded}
\usage{
fetch_table(x, schema = "aquatic_data", collect = FALSE, ...)

fetch_query(query, collect = FALSE, ...)

fetch_project(project_id, collect = FALSE, ...)

fetch_site_info(x = NULL, pattern = NULL, collect = FALSE)

fetch_species_info(
  x = NULL,
  pattern = NULL,
  taxon = "Fish",
  primary_discipline = "Aquatic fauna",
  collect = FALSE
)
}
\arguments{
\item{x}{a collected query (table), used to filter waterbodies, sites
and projects in \code{fetch_site_info} or species scientific and
common names in \code{fetch_species_info}}

\item{schema}{schema in which \code{x} is found. Defaults to
\code{"aquatic_data"}}

\item{collect}{logical: should a query be executed (\code{TRUE}) or
evaluated lazily (\code{FALSE}, the default)}

\item{\dots}{additional arguments passed to \link[dbplyr]{tbl_sql} for
\code{fetch_table} and \code{fetch_query} (ignored in
\code{fetch_project})}

\item{query}{a character specifying a SQL query}

\item{project_id}{an integer specifying an individual AAE project
(1 - Snags, 2 - VEFMAP, 4 - NFRC, 6 - Kiewa Ovens, 7 - SRA,
 8 - Southern Basins, 9 - Ovens Demo Reaches, 10 - King Parrot
 Creek Macquarie Perch, 11 - Lower Goulburn Projects, 12 - Hughes
 Creek Macquarie Perch, 13 - Seven Creeks Macquarie Perch,
 14 - Index of Estuarine Condition, 15 - LTIM Lower Goulburn,
 16 - IVT Broken Creek)}

\item{pattern}{a regex pattern used to filter waterbodies in
\code{fetch_site_info} or scientific names in \code{fetch_species_info}}

\item{taxon}{taxonomic group for which data are requested in
\code{fetch_species_info}. Defaults to "Fish". See examples to extract
a list of all possible taxonomic groups}

\item{primary_discipline}{discipline for which data are requested in
\code{fetch_species_info}. Defaults to "Aquatic fauna" but can take
values of "Aquatic fauna", "Flora", "Aquatic invertebrates",
"Terrestrial fauna", and "Marine"}
}
\description{
\code{fetch_table}, \code{fetch_query}, and
  \code{fetch_project} represent three ways to interact with the
  AAEDB. \code{fetch_table} provides access to prepared tables in
  the database, \code{fetch_query} allows users to compute custom
  queries, and \code{fetch_project} selects data for an
  individual AAE project.

  All functions require credentials to access the AAEDB, as well
  as a appropriate VPN connection. If making multiple queries,
  it can be easier to connect once to the AAEDB rather than repeatedly
  connecting (and disconnecting). This is possible with the
  \link[aae.db]{aaedb_connect} function.

  \code{fetch_query} can be used to download anything
  you would download with \code{fetch_table} or \code{fetch_project}.
  The benefits of \code{fetch_table} and \code{fetch_project} are in
  providing access to prepared tables containing commonly used variables
  for analyses of fish data. The benefit of \code{fetch_query} is in
  allowing custom queries. This may be especially useful when working
  with large spatial data sets.

  Update: the \code{fetch_} functions now return an unevaluated query
  rather than a full data table. This allows further filtering or
  changes to the query using \code{dplyr} methods prior to downloading
  the data. This is especially useful when downloading a subset of a
  much larger data sets. All three methods will remain available in
  future versions but may be renamed to better reflect their intended
  use.
}
\examples{
# connect to the AAEDB
aaedb_connect()

# dplyr methods used below
library(dplyr)

# set up a query that includes the full flat VEFMAP data set
vefmap <- fetch_table("v_vefmap_only_flat_data")

# can manipulate and filter this query with dplyr methods
vefmap <- vefmap \%>\%
  filter(
    waterbody == "Campaspe River",
    scientific_name == "Maccullochella peelii"
  )

# evaluate this query with collect
vefmap <- vefmap \%>\% collect()

# fetch information on the sites in a data set
vefmap_site_info <- fetch_site_info(vefmap)

# "spatialise" this information
library(sf)
vefmap_site_info <- vefmap_site_info \%>\%
  filter(!is.na(geom_pnt)) \%>\%
  collect()
vefmap_sf <- vefmap_site_info \%>\%
  st_set_geometry(st_as_sfc(vemfap_site_info$geom_pnt))

# or for all sites (optionally matching a regex expression)
murray_site_info <- fetch_site_info(pattern = "^Murray")

# extract information on the species in a data set
fetch_species_info(vefmap)

# or for all species with scientific names matching a pattern
fetch_species_info(pattern = "Maccull")

# list all taxonomic groups for use in fetch_species_info
fetch_table("taxon_lu", collect = FALSE) \%>\%
  select(taxon_type) \%>\%
  collect() \%>\%
  pull(taxon_type) \%>\%
  unique()

# and download data for one group
fetch_species_info(taxon = "Aquatic invertebrates")

# process a simple SQL query to list all projects with data from the
#   Ovens river
survey_info <- fetch_query(
  "SELECT waterbody, id_project
     FROM aquatic_data.site a LEFT JOIN aquatic_data.survey b
     ON a.id_site = b.id_site
     WHERE lower(waterbody) LIKE 'ovens\%'
     GROUP BY waterbody, id_project
     ORDER by waterbody, id_project",
  collect = FALSE
)
survey_info <- survey_info \%>\% collect()

# process this same query using dplyr methods
site_data <- fetch_table("site")
survey_data <- fetch_table("survey")
survey_info_dplyr <- site_data \%>\%
  left_join(
    survey_data \%>\% distinct(id_site, id_project),
    by = "id_site"
  ) \%>\%
  filter(grepl("ovens", waterbody, ignore.case = TRUE)) \%>\%
  distinct(waterbody, id_project) \%>\%
  arrange(waterbody, id_project) \%>\%
  collect()

# and grab information for individual projects
ovens_data <- fetch_project(9)
ovens_data <- ovens_data \%>\% collect()

# repeat this for a subset of years
ovens_data <- fetch_project(9, start = 2015, end = 2017)
ovens_data <- ovens_data \%>\% collect()

# optional: disconnect from the AAEDB prior to ending the R session
#   when all queries and evaluation is complete
# aaedb_disconnect()

}
